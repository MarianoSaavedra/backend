<div class="p-5 d-flex align-items-center">
	<div class="col-6 mt-1">
		<h1 class="text-center p-1 m-0">Entrega Final - Backend II</h1>
		<h2>ADMIN: email: mariano@saavedra.com - pass: 1234</h2>
		<h2>USER: email: mariano2@saavedra.com - pass: 1234</h2>
	</div>

	<ol class="col-6 mt-1">
		<li>Profesionalizar el servidor desarrollado en la primera preentrega</li>
		<li>Aplicar una arquitectura profesional para nuestro servidor</li>
		<li>Aplicar prácticas como patrones de diseño, mailing, variables de entorno. etc.
		</li>
		<li>Modificar nuestra capa de persistencia para aplicar los conceptos de DAO y DTO.
		</li>
		<li>Implementar el patrón Repository para trabajar con el DAO en la lógica de negocio.</li>
		<li>Modificar la ruta /current Para evitar enviar información sensible, enviar un DTO del usuario sólo con la
			información necesaria.</li>
		<li>Realizar un middleware que pueda trabajar en conjunto con la estrategia “current” para hacer un sistema de
			autorización y delimitar el acceso a dichos endpoints:</li>
		<li>Sólo el administrador puede crear, actualizar y eliminar productos.</li>
		<li>Sólo el usuario puede agregar productos a su carrito.</li>
		<li>Crear un modelo Ticket el cual contará con todas las formalizaciones de la compra. Éste contará con los
			campos Id (autogenerado por mongo) code: String debe autogenerarse y ser único purchase_datetime: Deberá
			guardar la fecha y hora exacta en la cual se formalizó la compra (básicamente es un created_at) amount:
			Number, total de la compra. purchaser: String, contendrá el correo del usuario asociado al carrito.
		</li>
		<li>Implementar, en el router de carts, la ruta /:cid/purchase, la cual permitirá finalizar el proceso de compra
			de dicho carrito. La compra debe corroborar el stock del producto al momento de finalizarse Si el producto
			tiene suficiente stock para la cantidad indicada en el producto del carrito, entonces restarlo del stock del
			producto y continuar. Si el producto no tiene suficiente stock para la cantidad indicada en el producto del
			carrito, entonces no agregar el producto al proceso de compra.
		</li>
		<li>Al final, utilizar el servicio de Tickets para poder generar un ticket con los datos de la compra. En caso
			de existir una compra no completada, devolver el arreglo con los ids de los productos que no pudieron
			procesarse. Una vez finalizada la compra, el carrito asociado al usuario que compró deberá contener sólo los
			productos que no pudieron comprarse. Es decir, se filtran los que sí se compraron y se quedan aquellos que
			no tenían disponibilidad.
		</li>
	</ol>
</div>